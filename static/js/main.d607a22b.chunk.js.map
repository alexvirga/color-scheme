{"version":3,"sources":["logo.svg","Components/Hue.js","Components/Distance.js","Components/ColorBlock.js","Components/Scheme.js","Components/Variation.js","Components/ColorChooser.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Hue","Slider","value","this","props","hue","onChange","handleHueChange","max","Component","Distance","distance","handleDistanceChange","min","step","ColorBlock","className","style","backgroundColor","color","Scheme","ToggleButtonGroup","scheme","exclusive","handleScheme","ToggleButton","Variation","variation","handleVariation","ColorChooser","state","colors","newScheme","ColorScheme","from_hue","setState","event","newValue","console","log","map","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d607a22b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport ColorScheme from \"color-scheme\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nclass Hue extends Component {\n\n\n  render() {\n   \n\n\n    return(\n        <div>\n        <h1> Hue </h1>\n        <Slider\n          value={this.props.hue}\n          onChange={this.props.handleHueChange}\n          max={360}\n        \n        />\n      </div>\n    )\n  }\n}\n\nexport default Hue;\n","import React, { Component } from \"react\";\nimport ColorScheme from \"color-scheme\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nclass Distance extends Component {\n\n\n  render() {\n   \n\n\n    return(\n        <div>\n        <h1> Distance </h1>\n        <Slider\n          value={this.props.distance}\n          onChange={this.props.handleDistanceChange}\n          min={0}\n          max={1}\n          step={0.00000001}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Distance;\n","import React, { Component } from \"react\";\nimport ColorScheme from \"color-scheme\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nclass ColorBlock extends Component {\n\n\n  render() {\n   \n\n\n    return(\n        <div className=\"color-block\" style={{ backgroundColor: `#${this.props.color}` }}> \n        {this.props.color}\n\n      </div>\n    )\n  }\n}\n\nexport default ColorBlock;\n","import React, { Component } from \"react\";\nimport ColorScheme from \"color-scheme\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nclass Scheme extends Component {\n\n\n  render() {\n   \n\n\n    return(\n        <div>\n            <h4> Scheme </h4>\n        <ToggleButtonGroup\n      value={this.props.scheme}\n      exclusive\n      onChange={this.props.handleScheme}\n    \n    >\n      <ToggleButton value=\"monochromatic\" > Monochromatic\n      \n      </ToggleButton>\n      <ToggleButton value=\"contrast\">Contrast\n    \n      </ToggleButton>\n      <ToggleButton value=\"triade\">Triade\n    \n      </ToggleButton>\n      <ToggleButton value=\"tetrade\">Tetrade\n   \n      </ToggleButton>\n      <ToggleButton value=\"analogic\" >Analogic\n   \n   </ToggleButton>\n    </ToggleButtonGroup>\n\n    </div>\n    )\n  }\n}\n\nexport default Scheme;\n","import React, { Component } from \"react\";\nimport ColorScheme from \"color-scheme\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nclass Variation extends Component {\n\n\n  render() {\n   \n\n\n    return(\n        <div>\n        <h4> Variation </h4>\n        <ToggleButtonGroup\n      value={this.props.variation}\n      exclusive\n      onChange={this.props.handleVariation}\n    \n    >\n      <ToggleButton value=\"default\" > Default\n      \n      </ToggleButton>\n      <ToggleButton value=\"pastel\">Pastel\n    \n      </ToggleButton>\n      <ToggleButton value=\"soft\">Soft\n    \n      </ToggleButton>\n      <ToggleButton value=\"light\">Light\n   \n      </ToggleButton>\n      <ToggleButton value=\"hard\" >Hard\n   \n   </ToggleButton>\n   <ToggleButton value=\"pale\" >Pale\n   \n   </ToggleButton>\n\n    </ToggleButtonGroup>\n\n    </div>\n    )\n  }\n}\n\nexport default Variation;\n","import React, { Component } from \"react\";\nimport ColorScheme from \"color-scheme\";\nimport Hue from \"./Hue\";\nimport Distance from \"./Distance\";\nimport ColorBlock from \"./ColorBlock\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Scheme from \"./Scheme\";\nimport Variation from \"./Variation\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\n\nclass ColorChooser extends Component {\n  state = {\n    colors: [],\n    hue: 260,\n    scheme: \"monochromatic\",\n    variation: \"light\",\n    distance: 0.01,\n  };\n\n  componentDidMount() {\n    this.newScheme();\n  }\n\n  newScheme = () => {\n    const scheme = new ColorScheme();\n    scheme\n      .from_hue(this.state.hue)\n      .scheme(this.state.scheme)\n      .distance(this.state.distance)\n\n      .variation(this.state.variation);\n\n    var colors = scheme.colors();\n    this.setState({ colors: colors });\n  };\n\n  handleHueChange = (event, newValue) => {\n    this.setState({ hue: newValue }, () => this.newScheme());\n  };\n\n  handleDistanceChange = (event, newValue) => {\n    this.setState({ distance: newValue });\n    this.newScheme();\n  };\n\n  handleScheme = (event, newValue) => {\n    console.log(newValue);\n    this.setState({ scheme: `${newValue}` }, () => this.newScheme());\n  };\n\n  handleVariation = (event, newValue) => {\n    this.setState({ variation: `${newValue}` }, () => this.newScheme());\n  };\n\n  render() {\n    return (\n        <div className=\"home\">\n\n       \n        <div className=\"colors-container\">\n        {this.state.colors.map((color) => (\n            <ColorBlock color={color} /> \n  \n        ))}\n        </div>\n      \n      <div className=\"color-chooser\">\n\n        <div>\n          <div>\n            <Hue\n              handleHueChange={this.handleHueChange}\n              value={this.state.hue}\n            />\n          </div>\n\n          <div>\n            <Scheme\n              handleScheme={this.handleScheme}\n              scheme={this.state.scheme}\n            />\n          </div>\n\n          <div>\n            <Variation\n              handleVariation={this.handleVariation}\n              variation={this.state.variation}\n            />\n          </div>\n\n          <div>\n<Distance handleDistanceChange={this.handleDistanceChange} distance={this.state.distance} />\n          </div>\n        </div>\n      </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default ColorChooser;\n","import React, { Component } from \"react\";\nimport ColorScheme from \"color-scheme\";\nimport ColorChooser from \"./ColorChooser\"\n\nclass Home extends Component {\n\n\n  render() {\n   \n\n\n    return(\n        <ColorChooser /> \n    )\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from \"./Components/Home\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n<Home /> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}